// Aos - the right initialisation
jQuery(document).ready(function () {
    (function () {
        // your page initialization code here
        // the DOM will be available here
        AOS.init({
            duration: 1000,
            offset: 0, // offset (in px) from the original trigger point
            anchorPlacement: 'top-bottom', // define where the AOS animations will be triggered
        });
    })();
});
// 

$(function () {

    $('.projects-item').on('mouseover', function (event) {
        $('.projects-images__img--active').removeClass('projects-images__img--active')
        for ( let item of $('.projects-images__img') ) {
            if ( item.id == $(this)[0].id ) {
                item.classList.add('projects-images__img--active')
            }
        }
    });

    $('.burger').on('click', function (event) {
        $('body').toggleClass('body--active')
    });

    $('.catalog-block__titling').on('click', function (event) {
        $('.catalog-block').toggleClass('catalog-block--disabled')
    });

    $('.card__link').on('click', function (event) {
        $('.order').addClass('order--actvie')
    });

    $('.order__top-close').on('click', function (event) {
        $('.order').removeClass('order--actvie')
    });

    $('.catalog-link').on('click', function (event) {
        $('.catalog-link').toggleClass('catalog-link--actvie')
        $('.catalog-services').toggleClass('catalog-services--actvie')
    });

    $('.tiles__button').on('click', function (event) {
        if ( $(this)[0].id == 0 ) {
            $('.catalog').removeClass('catalog--lines')
        } else {
            $('.catalog').addClass('catalog--lines')
        }
    });    

    $('.phone').on('click', function (event) {
        var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        if (screenWidth < 1000 ) {
            $('.phone').toggleClass('phone--active')
        } 
    });  

    $('.lang').on('click', function (event) {
        var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        if (screenWidth < 1000 ) {
            $('.lang').toggleClass('lang--active')
        } 
    });  


    // for ( let item of $('.card') ) {
    //     let cardText = item.querySelector('.card__text');
    //     if (cardText) {
    //         var textHeight = cardText.offsetHeight;
    //         item.style.maxHeight = `calc(100% - ${textHeight}px)`;
    //     }
    // }    
})

function adjustCatalogClass() {
    var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    var catalogElement = document.querySelector('.catalog');

    if (screenWidth < 550 && catalogElement) {
        catalogElement.classList.remove('catalog--lines');
    } 
}

// Вызываем функцию при загрузке страницы
window.addEventListener('load', function() {
    adjustCatalogClass();
});

// Добавляем слушатель событий на изменение размера окна
window.addEventListener('resize', function() {
    adjustCatalogClass();
});

var x, i, j, l, ll, selElmnt, a, b, c;
/* Look for any elements with the class "custom-select": */
x = document.getElementsByClassName("custom-select");
l = x.length;
for (i = 0; i < l; i++) {
  selElmnt = x[i].getElementsByTagName("select")[0];
  ll = selElmnt.length;
  /* For each element, create a new DIV that will act as the selected item: */
  a = document.createElement("DIV");
  a.setAttribute("class", "select-selected");
  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
  x[i].appendChild(a);
  /* For each element, create a new DIV that will contain the option list: */
  b = document.createElement("DIV");
  b.setAttribute("class", "select-items select-hide");
  for (j = 1; j < ll; j++) {
    /* For each option in the original select element,
    create a new DIV that will act as an option item: */
    c = document.createElement("DIV");
    c.innerHTML = selElmnt.options[j].innerHTML;
    c.addEventListener("click", function(e) {
        /* When an item is clicked, update the original select box,
        and the selected item: */
        var y, i, k, s, h, sl, yl;
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        sl = s.length;
        h = this.parentNode.previousSibling;
        for (i = 0; i < sl; i++) {
          if (s.options[i].innerHTML == this.innerHTML) {
            s.selectedIndex = i;
            h.innerHTML = this.innerHTML;
            y = this.parentNode.getElementsByClassName("same-as-selected");
            yl = y.length;
            for (k = 0; k < yl; k++) {
              y[k].removeAttribute("class");
            }
            this.setAttribute("class", "same-as-selected");
            break;
          }
        }
        h.click();
    });
    b.appendChild(c);
  }
  x[i].appendChild(b);
  a.addEventListener("click", function(e) {
    /* When the select box is clicked, close any other select boxes,
    and open/close the current select box: */
    e.stopPropagation();
    closeAllSelect(this);
    this.nextSibling.classList.toggle("select-hide");
    this.classList.toggle("select-arrow-active");
  });
}

function closeAllSelect(elmnt) {
  /* A function that will close all select boxes in the document,
  except the current select box: */
  var x, y, i, xl, yl, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  xl = x.length;
  yl = y.length;
  for (i = 0; i < yl; i++) {
    if (elmnt == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < xl; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}

/* If the user clicks anywhere outside the select box,
then close all select boxes: */
document.addEventListener("click", closeAllSelect);

// $(function () {
//     var mixer = mixitup('.draws-info__inner', {
//         load: {
//             filter: '.draw'
//         },
//         animation: {
//             enable: false
//         },
//     });
// })

// $(function () {
//     var containerEl1 = document.querySelector('[data-ref="container-1"]');
//     var containerEl2 = document.querySelector('[data-ref="container-2"]');

//     var config = {
//         controls: {
//             scope: 'local'
//         },
//         load: {
//             filter: '.item-first',
//         },
//         animation: {
//             effects: 'fade scale(0%)',
//             duration: 0,
//         },
//     };
//     var confiG = {
//         controls: {
//             scope: 'local'
//         },
//         load: {
//             filter: '.item-firstt',
//         },
//         animation: {
//             effects: 'fade scale(0%)',
//             duration: 0,
//         },
//     };

//     var confiGG = {
//         controls: {
//             scope: 'local'
//         },
//         load: {
//             filter: '.item-first',
//         }
//     };

//     var mixer1 = mixitup(containerEl1, config);
//     var mixer1 = mixitup(containerEl2, confiG);

// })

new Swiper('.certificates-swiper', {
    slidesPerView: 6,
    loop: true,
    speed: 750,
    spaceBetween: 30,
    breakpoints: {
        301: {
            speed: 750,
            spaceBetween: 20,
            slidesPerView: 2,
            grid: {
                rows: 2,
            },
            loop: false,
        },
        501: {
            slidesPerView: 3.2,
            loop: true,
            speed: 750,
            spaceBetween: 20,
        },
        751: {
            slidesPerView: 3.5,
            loop: true,
            speed: 750,
            spaceBetween: 30,
        },
        1001: {
            slidesPerView: 4.5,
            loop: true,
            speed: 750,
            spaceBetween: 30,
        },
        1201: {
            slidesPerView: 5.5,
            loop: true,
            speed: 750,
            spaceBetween: 30,
        },
        1351: {
            slidesPerView: 6,
            loop: true,
            speed: 750,
            spaceBetween: 30,
        },
    }
});

new Swiper('.clients-swiper', {
    slidesPerView: 6,
    loop: true,
    speed: 750,
    spaceBetween: 30,
    breakpoints: {
        301: {
            speed: 750,
            spaceBetween: 10,
            slidesPerView: 2,
            grid: {
                rows: 2,
            },
            loop: false,
        },
        501: {
            slidesPerView: 3,
            loop: true,
            speed: 750,
            spaceBetween: 15,
        },
        601: {
            slidesPerView: 4,
            loop: true,
            speed: 750,
            spaceBetween: 25,
        },
        1051: {
            slidesPerView: 5,
            loop: true,
            speed: 750,
            spaceBetween: 30,
        },
        1251: {
            slidesPerView: 6,
            loop: true,
            speed: 750,
            spaceBetween: 30,
        },
    }
});

new Swiper('.gallery-swiper', {
    slidesPerView: 1,
    speed: 750,
    spaceBetween: 30,
       navigation: {
        prevEl: '.gallery-swiper__buttons-btn--prev',
        nextEl: '.gallery-swiper__buttons-btn--next',
    },
    // pagination: {
    //     el: '.recalls-swiper__pagination',
    //     type: 'bullets',
    // },
    // breakpoints: {
    //     301: {
    //         speed: 750,
    //         spaceBetween: 10,
    //         slidesPerView: 2,
    //         grid: {
    //             rows: 2,
    //         },
    //         loop: false,
    //     },
    //     501: {
    //         slidesPerView: 3,
    //         loop: true,
    //         speed: 750,
    //         spaceBetween: 15,
    //     },
    //     601: {
    //         slidesPerView: 4,
    //         loop: true,
    //         speed: 750,
    //         spaceBetween: 25,
    //     },
    //     1051: {
    //         slidesPerView: 5,
    //         loop: true,
    //         speed: 750,
    //         spaceBetween: 30,
    //     },
    //     1251: {
    //         slidesPerView: 6,
    //         loop: true,
    //         speed: 750,
    //         spaceBetween: 30,
    //     },
    // }
});



document.addEventListener('DOMContentLoaded', function () {
    // Собираем все элементы <picture>
    var pictureElements = document.querySelectorAll('picture');

    // Перебираем каждый <picture>
    pictureElements.forEach(function (picture) {
        // Находим <img> внутри каждого <picture>
        var imgElement = picture.querySelector('img');

        // Добавляем обработчик события загрузки для <img>
        imgElement.onload = function () {
            // При загрузке изображения добавляем атрибут и класс к родительскому <picture>
            picture.setAttribute('data-loaded', 'true');
            picture.classList.add('loaded');
        };
        
        // Если изображение уже загружено (кэшировано), сразу вызываем обработчик события
        if (imgElement.complete) {
            imgElement.onload();
        }
    });
});

// timer 
// setInterval(() => {
//     let timeNow = new Date() // Время сейчас 
//     let timeNowTimeStamp = timeNow.getTime() // сколько прошоло с 1970 до теперешнего момената 
//     // console.log(timeNowTimeStamp)

//     let ourDate = new Date('2023-03-19T23:14:00') // Время нашего знакомства 
//     let ourDateTimeStamp = ourDate.getTime() // сколько прошоло с 1970 до теперешнего момената
//     // console.log(ourDateTimeStamp)

//     let timeStampMilliseconds = ourDateTimeStamp - timeNowTimeStamp // Миллисекунды ( разница между временем теперь и временем нашей встречи )

//     let secondsOfTimeStamp = timeStampMilliseconds / 1000 // Секунды - разницы 
//     let minutesOfTimeStamp = secondsOfTimeStamp / 60 // минуты - разницы 
//     let hoursOfTimeStamp = minutesOfTimeStamp / 60 // часы - разницы 
//     let daysOfTimeStamp = hoursOfTimeStamp / 24 // Дни - разницы 

//     let secondsOfTimeStampFloor = Math.floor(timeStampMilliseconds / 1000) // Секунды - разницы 
//     let minutesOfTimeStampFloor = Math.floor(secondsOfTimeStamp / 60) // минуты - разницы 
//     let secondsRamnant = secondsOfTimeStampFloor - (minutesOfTimeStampFloor * 60) // Остаток секунд - то есть наши секунды в Html
//     let hoursOfTimeStampFloor = Math.floor(minutesOfTimeStamp / 60) // часы - разницы 
//     let minutesRamnant = minutesOfTimeStampFloor - (hoursOfTimeStampFloor * 60) // Остаток минут - то есть наши минуты в Html
//     let daysOfTimeStampFloor = Math.floor(hoursOfTimeStamp / 24) // Дни - разницы 
//     let hoursRamnant = hoursOfTimeStampFloor - (daysOfTimeStampFloor * 24) // Остаток часов - то есть наши часы в Html

//     let hours = document.querySelector('.header-bottom-body-row__item-text--hours')

//     let minutes = document.querySelector('.header-bottom-body-row__item-text--minutes')

//     let seconds = document.querySelector('.header-bottom-body-row__item-text--seconds')

//     // // //

//     seconds.innerHTML = secondsRamnant

//     if (hoursRamnant < 10) {
//         console.log(String(hoursRamnant)[0])
//         hours.innerHTML = '0' + String(hoursRamnant) + '<span>:</span>'
//     } else {
//         hours.innerHTML = String(hoursRamnant) + '<span>:</span>'
//     }

//     if (minutesRamnant < 10) {
//         minutes.innerHTML = '0' + String(minutesRamnant) + '<span>:</span>'
//     } else {
//         minutes.innerHTML = String(minutesRamnant) + '<span>:</span>'
//     }

//     if (secondsRamnant < 10) {
//         seconds.innerHTML = '0' + String(secondsRamnant)
//     } else {
//         seconds.innerHTML = String(secondsRamnant)
//     }
// }, 1000)
// // 

// typed js 

// $(".typed").typed({
//     strings: ["Графічним дизайнерам", "Початковим веб-дизайнерам", "Студентам/школярам", "Офісним працівникам"],
//     // Optionally use an HTML element to grab strings from (must wrap each string in a <p>)
//     stringsElement: null,
//     // typing speed
//     typeSpeed: 30,
//     // time before typing starts
//     startDelay: 1200,
//     // backspacing speed
//     backSpeed: 20,
//     // time before backspacing
//     backDelay: 500,
//     // loop
//     loop: true,
//     // false = infinite
//     loopCount: 5,
//     // show cursor
//     showCursor: false,
//     // character for cursor
//     cursorChar: "|",
//     // attribute to type (null == text)
//     attr: null,
//     // either html or text
//     contentType: 'html',
//     // call when done callback function
//     callback: function () {},
//     // starting callback function before each string
//     preStringTyped: function () {},
//     //callback for every typed string
//     onStringTyped: function () {},
//     // callback for reset
//     resetCallback: function () {}
// });
// // 

// Phone mask 

// window.addEventListener("DOMContentLoaded", function () {
//     [].forEach.call(document.querySelectorAll('.tel'), function (input) {
//         var keyCode;

//         function mask(event) {
//             event.keyCode && (keyCode = event.keyCode);
//             var pos = this.selectionStart;
//             if (pos < 3) event.preventDefault();
//             var matrix = "+7 (___) ___-____",
//                 i = 0,
//                 def = matrix.replace(/\D/g, ""),
//                 val = this.value.replace(/\D/g, ""),
//                 new_value = matrix.replace(/[_\d]/g, function (a) {
//                     return i < val.length ? val.charAt(i++) || def.charAt(i) : a
//                 });
//             i = new_value.indexOf("_");
//             if (i != -1) {
//                 i < 5 && (i = 3);
//                 new_value = new_value.slice(0, i)
//             }
//             var reg = matrix.substr(0, this.value.length).replace(/_+/g,
//                 function (a) {
//                     return "\\d{1," + a.length + "}"
//                 }).replace(/[+()]/g, "\\$&");
//             reg = new RegExp("^" + reg + "$");
//             if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;
//             if (event.type == "blur" && this.value.length < 5) this.value = ""
//         }

//         input.addEventListener("input", mask, false);
//         input.addEventListener("focus", mask, false);
//         input.addEventListener("blur", mask, false);
//         input.addEventListener("keydown", mask, false)

//     });

// });

// // 

// Visibilyto of element on scroll or not
// $(function () {
//     // Получаем нужный элемент
//     var element = document.querySelector('footer');

//     var Visible = function (target) {
//         // let headerBottom = document.querySelectorAll('.header-bottom')[0]
//         // var menuBtn = document.querySelectorAll('.menu-btn')[0]
//         // var footerTop = document.querySelectorAll('.footer-top')[0]
//         // Все позиции элемента
//         var targetPosition = {
//                 top: window.pageYOffset + target.getBoundingClientRect().top,
//                 left: window.pageXOffset + target.getBoundingClientRect().left,
//                 right: window.pageXOffset + target.getBoundingClientRect().right,
//                 bottom: window.pageYOffset + target.getBoundingClientRect().bottom
//             },
//             // Получаем позиции окна
//             windowPosition = {
//                 top: window.pageYOffset,
//                 left: window.pageXOffset,
//                 right: window.pageXOffset + document.documentElement.clientWidth,
//                 bottom: window.pageYOffset + document.documentElement.clientHeight
//             };

//         if (targetPosition.bottom > windowPosition.top && // Если позиция нижней части элемента больше позиции верхней чайти окна, то элемент виден сверху
//             targetPosition.top < windowPosition.bottom && // Если позиция верхней части элемента меньше позиции нижней чайти окна, то элемент виден снизу
//             targetPosition.right > windowPosition.left && // Если позиция правой стороны элемента больше позиции левой части окна, то элемент виден слева
//             targetPosition.left < windowPosition.right) { // Если позиция левой стороны элемента меньше позиции правой чайти окна, то элемент виден справа
//             // Если элемент полностью видно, то запускаем следующий код
//             $('.connection__bottom-btn').addClass('connection__bottom-btn--none')
//             $('.connection').addClass('connection-margin')

//         } else {
//             $('.connection__bottom-btn').removeClass('connection__bottom-btn--none')
//             $('.connection').removeClass('connection-margin')
//         };
//     };

//     // Запускаем функцию при прокрутке страницы
//     window.addEventListener('scroll', function () {
//         Visible(element);
//     });

//     // А также запустим функцию сразу. А то вдруг, элемент изначально видно
//     Visible(element);
// })
// // 